import gettextimport osfrom contextvars import ContextVarfrom typing import Callablefrom settings import settings_trans_var: ContextVar[Callable] = ContextVar("translate", default=lambda s: s)class Trans:    def __init__(self, localedir: str = "locales", language: str = settings.LANGUAGE_CODE):        self.localedir = localedir        self.language = language        self.translations = {}  # 缓存翻译实例    def load_translation(self, lang: str):        """加载指定语言的翻译文件"""        try:            # 尝试加载指定语言的翻译文件            translate = gettext.translation("messages", localedir=self.localedir, languages=[lang], fallback=True)            translate.install()            self.translations[lang] = translate        except FileNotFoundError:            # 如果翻译文件找不到，使用默认语言            translate = gettext.translation(                "messages", localedir=self.localedir, languages=[self.language], fallback=True            )            translate.install()            self.translations[self.language] = translate    def get_translation(self, lang: str):        """获取指定语言的翻译实例，若未加载则加载。规避每个请求都加载语法翻译文件的问题"""        lang = lang or self.language        if lang not in self.translations:            self.load_translation(lang)        return self.translations.get(lang)# 初始化翻译管理器_trans = Trans(localedir=os.path.join(settings.BASE_PATH, "locales"))def ugettext_lazy(s: str) -> str:    """惰性翻译函数（实际使用时才获取上下文）"""    try:        # 尝试从上下文获取当前翻译函数        translate = _trans_var.get()    except LookupError:        # 上下文未设置时使用默认翻译        translate = _trans.get_translation(settings.LANGUAGE_CODE)    return translate.gettext(s)def activate_translation(lang: str) -> None:    """激活当前请求的翻译器"""    _trans_var.set(_trans.get_translation(lang))def deactivate_translation() -> None:    """重置翻译上下文"""    _trans_var.set(lambda s: s)
