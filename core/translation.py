import gettextimport osfrom typing import Optionalfrom settings import settingsclass TranslationManager:    def __init__(self, localedir: str = "locales", default_lang: str = settings.LANGUAGE_CODE):        self.localedir = localedir        self.default_lang = default_lang        self.translations = {}      # 缓存翻译实例    def load_translation(self, lang: str):        """加载指定语言的翻译文件"""        try:            # 尝试加载指定语言的翻译文件            translation = gettext.translation(                'messages', localedir=self.localedir, languages=[lang], fallback=True)            translation.install()            self.translations[lang] = translation        except FileNotFoundError:            # 如果翻译文件找不到，使用默认语言            translation = gettext.translation(                'messages', localedir=self.localedir, languages=[self.default_lang], fallback=True)            translation.install()            self.translations[self.default_lang] = translation    def get_translation(self, lang: Optional[str] = settings.LANGUAGE_CODE):        """获取指定语言的翻译实例，若未加载则加载。规避每个请求都加载语法翻译文件的问题"""        lang = lang or self.default_lang        if lang not in self.translations:            self.load_translation(lang)        return self.translations.get(lang)# 初始化翻译管理器localedir = os.path.join(settings.BASE_PATH, 'locales')translation_manager = TranslationManager(localedir)